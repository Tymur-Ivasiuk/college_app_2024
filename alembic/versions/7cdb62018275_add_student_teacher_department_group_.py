"""add student, teacher, department, group, specialty

Revision ID: 7cdb62018275
Revises: 58fd586cfc4a
Create Date: 2024-05-26 23:54:44.933019

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7cdb62018275'
down_revision: Union[str, None] = '58fd586cfc4a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create department and teacher tables without the foreign key constraint
    op.create_table(
        'department',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(), nullable=False),
        sa.Column('head_id', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'teacher',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('desc', sa.String(), nullable=True),
        sa.Column('department_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id')
    )

    # Add the foreign key constraints after both tables are created
    op.create_foreign_key(
        'fk_department_head_id', 'department', 'teacher', ['head_id'], ['id']
    )
    op.create_foreign_key(
        'fk_teacher_department_id', 'teacher', 'department', ['department_id'], ['id']
    )

    op.create_table(
        'specialty',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('code', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(), nullable=False),
        sa.Column('department_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['department_id'], ['department.id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('code'),
        sa.UniqueConstraint('title')
    )
    op.create_table(
        'group',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(length=10), nullable=False),
        sa.Column('full_title', sa.String(), nullable=True),
        sa.Column('start_year', sa.Integer(), nullable=False),
        sa.Column('curator_id', sa.Integer(), nullable=True),
        sa.Column('specialty_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['curator_id'], ['teacher.id'], ondelete='SET NULL'),
        sa.ForeignKeyConstraint(['specialty_id'], ['specialty.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'student',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('group_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # Drop foreign keys
    op.drop_constraint('fk_teacher_department_id', 'teacher', type_='foreignkey')
    op.drop_constraint('fk_department_head_id', 'department', type_='foreignkey')

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('student')
    op.drop_table('group')
    op.drop_table('specialty')
    op.drop_table('teacher')
    op.drop_table('department')
    # ### end Alembic commands ###
